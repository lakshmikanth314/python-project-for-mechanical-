# -*- coding: utf-8 -*-
"""day 8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17T9LpsZHIs9gYunPqlvtonDgO6ukmuQ3
"""

class motor:
  def __init__(self,power_kw,efficiency):
    self.power_kw=power_kw
    self.efficiency=efficiency
  def output_power(self):
    return self.power_kw*self.efficiency
motor1=motor(10,0.92)
print(motor1.output_power())

from scipy.optimize import fsolve
def eq(x):
  return 3*x**2-x-1
root=fsolve(eq,0)
print('Root:',root)

try:
    data = float(input('enter load value:'))
except ValueError:
    print('Invalid input!Enter a number')

import numpy as np
sample = np.random.normal(50,5,10000)
failure_rate = np.mean(sample>60)
print('failure rate:',failure_rate*100,'%')

from multiprocessing import Pool

def square(n):
  return n*n

with Pool(4) as p:
  print(p.map(square,[1,2,3,4,5]))

from scipy.optimize import fsolve

def eq(x):
  return 3*x**2-x-1

root = fsolve(eq, 0)
print('Root:', root)

import json
with open('machine_config.json') as f:
  config=json.load(f):
print(config['motor']['rated_speed'])



import json

dummy_config = {
    "motor": {
        "rated_speed": 1500,
        "power_kw": 10
    },
    "sensor": {
        "type": "temperature",
        "unit": "Celcius"
    }
}

with open('machine_config.json', 'w') as f:
    json.dump(dummy_config, f, indent=4)

print("Dummy 'machine_config.json' created.")

import numpy as np
from scipy.optimize import curve_fit
def model(x,a,b):
   return a*np.exp(b*x)
x=np.linspace(0,4,50)
y=model(x,2,0.5)+np.random.normal(0,0.2,50)
popt,_=curve_fit(model,x,y)
print(popt)

import tkinter as tk
  def calc():
    f = float(entry_force.get())
    a = float(entry_area.get())
    result.set(F/A)
  root = tk.TK()
  entry_force=tk.Entry(root)
  entry_area=tk.Entry(root)
  result = tk.string var()
  tk.button(root)

